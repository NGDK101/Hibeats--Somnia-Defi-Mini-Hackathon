import { NFTMetadataGenerator } from './utils/NFTMetadataGenerator';
import { ipfsService } from './services/ipfsService';
import { IPFSMetadata } from './types/music';

/**
 * Test script for NFT metadata generation and IPFS upload
 */
export class NFTMetadataTester {
  /**
   * Test metadata generation
   */
  static async testMetadataGeneration(): Promise<void> {
    console.log('🧪 Testing NFT Metadata Generation...');

    try {
      const testParams = {
        name: "Test AI Music Track",
        description: "A test track generated by AI for demonstration purposes",
        image: "https://example.com/test-image.jpg",
        audioUrl: "https://example.com/test-audio.mp3",
        duration: 180,
        genre: "Electronic",
        creator: "0x1234567890123456789012345678901234567890",
        modelUsed: "suno-v4",
        prompt: "Create an electronic music track with upbeat tempo",
        tags: "electronic, upbeat, test",
        sunoId: "test-suno-123",
        taskId: "test-task-456",
        royaltyRate: 5,
        isRemixable: true,
        creationDate: new Date().toISOString(),
        customCover: false
      };

      const metadata = NFTMetadataGenerator.generateMusicMetadata(testParams);
      console.log('✅ Metadata generated successfully:', metadata);

      // Validate metadata
      const validation = NFTMetadataGenerator.validateMetadata(metadata);
      if (validation.isValid) {
        console.log('✅ Metadata validation passed');
      } else {
        console.error('❌ Metadata validation failed:', validation.errors);
        return;
      }

      // Test metadata preview
      const preview = NFTMetadataGenerator.createMetadataPreview(metadata);
      console.log('📋 Metadata preview:', preview);

      return metadata;
    } catch (error) {
      console.error('❌ Metadata generation test failed:', error);
      throw error;
    }
  }

  /**
   * Test IPFS upload (without actually uploading to avoid costs)
   */
  static async testIPFSUploadValidation(metadata: IPFSMetadata): Promise<void> {
    console.log('🧪 Testing IPFS Upload Validation...');

    try {
      // Test the validation logic without actual upload
      const validation = ipfsService['validateMetadataForUpload'](metadata);
      if (validation.isValid) {
        console.log('✅ IPFS upload validation passed');
      } else {
        console.error('❌ IPFS upload validation failed:', validation.errors);
      }

      // Test URL validation
      const validUrls = [
        'https://example.com/image.jpg',
        'http://example.com/audio.mp3',
        'ipfs://QmTest123'
      ];

      const invalidUrls = [
        'not-a-url',
        'ftp://example.com/file.jpg',
        ''
      ];

      console.log('🔗 Testing URL validation...');
      validUrls.forEach(url => {
        const isValid = ipfsService['isValidUrl'](url);
        console.log(`  ${url}: ${isValid ? '✅ Valid' : '❌ Invalid'}`);
      });

      invalidUrls.forEach(url => {
        const isValid = ipfsService['isValidUrl'](url);
        console.log(`  ${url}: ${isValid ? '✅ Valid' : '❌ Invalid'}`);
      });

    } catch (error) {
      console.error('❌ IPFS upload validation test failed:', error);
      throw error;
    }
  }

  /**
   * Run all tests
   */
  static async runAllTests(): Promise<void> {
    console.log('🚀 Starting NFT Metadata Tests...\n');

    try {
      // Test 1: Metadata Generation
      console.log('='.repeat(50));
      console.log('TEST 1: Metadata Generation');
      console.log('='.repeat(50));
      const metadata = await this.testMetadataGeneration();

      console.log('\n' + '='.repeat(50));
      console.log('TEST 2: IPFS Upload Validation');
      console.log('='.repeat(50));
      if (metadata) {
        await this.testIPFSUploadValidation(metadata);
      }

      console.log('\n' + '='.repeat(50));
      console.log('🎉 All tests completed successfully!');
      console.log('='.repeat(50));

    } catch (error) {
      console.error('\n❌ Test suite failed:', error);
      throw error;
    }
  }
}

// Export for use in other files
export default NFTMetadataTester;